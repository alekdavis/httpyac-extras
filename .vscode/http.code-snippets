{
  "Import file": {
    "scope": "http,rest",
    "prefix": ["# @","import","include","file"],
    "description": "Import a local file.",
    "body": [
      "# @import ${1:pathRelativeToCurrentFile}/${2:importedFileName}.http"
    ]
  },
  "Any HTTP request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region"],
    "description": "Create a test region for any type of HTTP request.",
    "body": [
      "### ${1:Test title}",
      "${2:/*\n${3:Optional test description.}\n*/}",
      "# @name ${4:testResponseName}",
      "${5:# @ref ${6:referencedTestResponseName}}",
      "${7: {{\n\t// Skip this test if expected condition from referenced test response is not met.\n\texports.\\$cancel = !$6.${8:expectedCondition};\n\\}\\}}",
      "${9|GET,POST,PATCH,PUT,DELETE|} /${10:endpoint}",
      "${11:\t?query=a\n\t&b=c}",
      "Authorization: ${12|oauth2,Bearer,openid,Basic|} ${13|client_credentials,authorization_code,{{bearerToken}},{{user}},implicit,password,device_code|} ${14|clientCredentials,credentialsVariablePrefix,{{password}}|}",
      "${15:Content-Type: ${16|application/json,application/merge-patch+json,application/json-patch+json,application/x-www-form-urlencoded|}}",
      "${17|{\"a\":\"b\"},[{\"a\":\"b\"}\\,{\"c\":\"d\"}]|}",
      "",
      "?? status == ${18|200,201,202,204,400,401,404,409|}",
      "?? status startsWith ${19|20,40|}",
      "${0}"
    ]
  },
  "HTTP GET (ITEM) request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","get","item","single","one"],
    "description": "Create a test region for an HTTP GET request returning a single item.",
    "body": [
      "### ${1:Get ${2:sample}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "GET /${6:endpoint}/{{${7:id}}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 200",
      "?? js $3 contains ${8:propertyName}",
      "?? js $3.$9 ${10|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}",
      "${0}"
    ]
  },
  "HTTP GET (LIST) request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","get","list","collection","array","many","multiple"],
    "description": "Create a test region for an HTTP GET request returning a list.",
    "body": [
      "### ${1:Get ${2:samples}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "GET /${6:endpoint}",
      "${7:\t?query=a\n\t&b=c}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 200",
      "?? js $3 isArray",
      "?? js $3.length > 0",
      "${0}"
    ]
  },
  "HTTP POST request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","post","create"],
    "description": "Create test region for an HTTP POST request.",
    "body": [
      "### ${1:Create ${2:sample}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "POST /${6:endpoint}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/json",
      "{",
      "${7:\t\"a\":\"b\",\n\t\"c\":\"d\"}",
      "}",
      "",
      "?? status == 201",
      "?? header Location exists",
      "?? header Location endsWith {{${8:id}}}",
      "?? body id exists",
      "?? body id isString",
      "${0}"
    ]
  },
  "HTTP PUT request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","put","replace"],
    "description": "Create test region for an HTTP PUT request.",
    "body": [
      "### ${1:Replace ${2:sample}}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "PUT /${6:endpoint}/{{${7:id}}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/json",
      "{",
      "${8:\t\"a\":\"b\",\n\t\"c\":\"d\"}",
      "}",
      "",
      "?? status == ${9|200,204|}",
      "?? body ${10:responseBodyPropertyName} ${11|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}",
      "${0}"
    ]
  },
  "HTTP PATCH request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","patch","update"],
    "description": "Create a test region for an RFC 7396-compliant REST PATCH request with a body holding a single item and application/merge-patch+json content type.",
    "body": [
      "### ${1:Update ${2:sample}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "PATCH /${6:endpoint}/{{${7:id}}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/merge-patch+json",
      "{",
      "\t\"a\":\"b\",",
      "\t\"c\":\"d\"",
      "}",
      "",
      "?? status == ${8|200,204|}",
      "?? body ${9:responseBodyPropertyName} ${10|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}",
      "${0}"
    ]
  },
  "HTTP PATCH request (MERGE-PATCH+JSON)": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","patch","update"],
    "description": "Create a test region for an RFC 6902-compliant REST PATCH request with a body holding an array of patch operations and application/json-patch+json content type.",
    "body": [
      "### ${1:Update ${2:sample}}",
      "# @name ${3:$2Json}",
      "${4:# @ref ${5:referencedTest}}",
      "PATCH /${6:endpoint}/{{${7:id}}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/json-patch+json",
      "[",
      "\t{\"op\":\"add\",\"path\":\"/someValue\",\"value\":\"{{newValue}}\"},",
      "\t{\"op\":\"replace\",\"path\":\"/someOtherValue\",\"value\":\"{{updatedValue}}\"},",
      "\t{\"op\":\"remove\",\"path\":\"/yetAnotherValue\"}",
      "]",
      "",
      "?? status == ${8|200,204|}",
      "?? body ${9:responseBodyPropertyName} ${10|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}",
      "${0}"
    ]
  },
  "HTTP DELETE request": {
    "scope": "http,rest",
    "prefix": ["###","http","request","region","delete"],
    "description": "Create a test region for an HTTP DELETE request.",
    "body": [
      "### ${1:Delete ${2:sample}}}",
      "# @name ${2:sampleTest}",
      "# @ref ${3:referencedTest}",
      "DELETE /${4:endpoint}/{{${5:id}}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == ${6|202,204|}",
      "${0}"
    ]
  },
  "HTTP CRUD requests": {
    "scope": "http,rest",
    "prefix": ["# @","###","http","request","region","crud"],
    "description": "Create HTTP requests for a typical CRUD test operation sequence.",
    "body": [
      "# @import ../../common.http",
      "",
      "@getFilter=FILTER",
      "@propertyA=PropertyA",
      "@propertyB=PropertyB",
      "@updatedPropertyA=UpdatedPropertyA",
      "@updatedPropertyB=UpdatedPropertyB",
      "",
      "### Get samples for pre-test cleanup",
      "# @name preCleanupGetSamples",
      "GET /samples?filter={{getFilter}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 200",
      "",
      "### Delete sample for pre-test cleanup",
      "# @name preCleanupSamples",
      "# @ref preCleanupGetSamples",
      "{{",
      "  if (!preCleanupGetSamples?.length) {",
      "    exports.\\$cancel = true;",
      "  } else {",
      "    let ids = preCleanupGetSamples.map(a => a.id);",
      "    exports.ids = ids;",
      "  }",
      "}}",
      "# @loop for id of ids",
      "DELETE /samples/{{id}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 204",
      "",
      "### Create sample",
      "# @name createSample",
      "POST /samples",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/json",
      "{",
      "  \"propertyA\": \"{{propertyA}}\",",
      "  \"propertyB\": \"{{propertyB}}\"",
      "}",
      "",
      "?? status == 201",
      "",
      "?? body id isString",
      "?? body propertyA == {{propertyA}}",
      "?? body propertyB == {{propertyB}}",
      "",
      "?? header Location endsWith {{createSample.id}}",
      "",
      "### Get sample by ID",
      "# @name getSampleById",
      "# @ref createSample",
      "GET /samples/{{createSample.id}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 200",
      "",
      "?? body id == {{createSample.id}}",
      "?? body propertyA == {{propertyA}}",
      "?? body propertyB == {{propertyB}}",
      "",
      "### Update sample",
      "# @name updateSample",
      "# @ref createSample",
      "PATCH /samples/{{createSample.id}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "Content-Type: application/json",
      "{",
      "  \"propertyA\": \"{{updatedPropertyA}}\",",
      "  \"propertyB\": \"{{updatedPropertyB}}\"",
      "}",
      "",
      "?? status == 204",
      "",
      "### Get updated sample by ID",
      "# @name getUpdatedSampleById",
      "# @ref createSample",
      "# @ref updateSample",
      "GET /samples/{{createSample.id}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 200",
      "",
      "?? body id == {{createSample.id}}",
      "?? body propertyA == {{updatedPropertyA}}",
      "?? body propertyB == {{updatedPropertyB}}",
      "",
      "### Delete sample for post-test cleanup",
      "# @name postCleanupSamples",
      "# @ref createSample",
      "{{",
      "  if (!createSample) {",
      "    exports.\\$cancel = true;",
      "  }",
      "}}",
      "DELETE /samples/{{createSample.id}}",
      "Authorization: oauth2 client_credentials clientCredentials",
      "",
      "?? status == 204"
    ]
  },
  "Request name": {
    "scope": "http,rest",
    "prefix": ["# @","name","id"],
    "description": "Add the request name/ID (can be used for response variable, too).",
    "body": [
      "# @name ${1:testOrResponseVariableName}"
    ]
  },
  "Request title": {
    "scope": "http,rest",
    "prefix": ["# @","title"],
    "description": "Add the request title (title is used in CLI output and outline view).",
    "body": [
      "# @title ${1:title}"
    ]
  },
  "Request description (short)": {
    "scope": "http,rest",
    "prefix": ["# @","request","region","description"],
    "description": "Add a short request description.",
    "body": [
      "# @description ${1:description}"
    ]
  },
  "Request description (long)": {
    "scope": "http,rest",
    "prefix": ["# @","description"],
    "description": "Add a long request description.",
    "body": [
      "/*",
      "${1:description}",
      "*/"
    ]
  },
  "Request reference (once)": {
    "scope": "http,rest",
    "prefix": ["# @","reference","dependency"],
    "description": "Add a reference to another request (referenced request will execute once until environment is reset).",
    "body": [
      "# @ref ${1:referencedTestOrResponseVariableName}"
    ]
  },
  "Request reference (always)": {
    "scope": "http,rest",
    "prefix": ["# @","reference","dependency"],
    "description": "Add a reference to another request (referenced request will execute always).",
    "body": [
      "# @forceRef ${1:referencedTestOrResponseVariableName}"
    ]
  },
  "Loop for item of array": {
    "scope": "http,rest",
    "prefix": ["# @","loop","for","iterate"],
    "description": "Repeat the request for each item of the array.",
    "body": [
      "# @loop for ${1:item} of ${2:array}"
    ]
  },
  "Loop for index from 0 to max": {
    "scope": "http,rest",
    "prefix": ["# @","loop","for","iterate"],
    "description": "Repeat the request N times (the variable '$index' will hold the current iteration from 0 to max-1 with an increment of 1).",
    "body": [
      "# @loop for ${1:N}"
    ]
  },
  "Loop while": {
    "scope": "http,rest",
    "prefix": ["# @","loop","while","iterate"],
    "description": "Repeat the request while the specified condition is met.",
    "body": [
      "# @while ${1:condition}"
    ]
  },
  "Sleep time": {
    "scope": "http,rest",
    "prefix": ["# @","sleep","wait","pause"],
    "description": "Add sleep time (in milliseconds) before the request.",
    "body": [
      "# @sleep ${1:sleepTimeInMilliseconds}"
    ]
  },
  "Disable certificate validation": {
    "scope": "http,rest",
    "prefix": ["# @","certificate","ssl","reject","allow","https"],
    "description": "Turn off certificate validation to allow secure (HTTPS) connections to hosts using self-signed (and other not properly signed) certificates.",
    "body": [
      "# @no-reject-unauthorized"
    ]
  },
  "Response status assetion": {
    "scope": "http,rest",
    "prefix": ["??","assert"],
    "description": "Validate the HTTP response status code.",
    "body": [
      "?? status ${1|==,!=,>,>=,<,<=,startsWith,endWith|} ${2|200,201,204,400,401,404,409,20,2,40,4|}"
    ]
  },
  "Response body assetion": {
    "scope": "http,rest",
    "prefix": ["??","assert"],
    "description": "Validate a simple property of the HTTP response body against a simple condition.",
    "body": [
      "?? body ${1:testResponsePropertyName} ${2|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}"
    ]
  },
  "Response header assetion": {
    "scope": "http,rest",
    "prefix": ["??","assert"],
    "description": "Validate an HTTP response header against a simple condition.",
    "body": [
      "?? header ${1:responseHeaderName} ${2|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}"
    ]
  },
  "JS response assetion": {
    "scope": "http,rest",
    "prefix": ["??","assert","js"],
    "description": "Validate an HTTP response property against a simple or complex condition using JavaScript.",
    "body": [
      "?? js response.${1:parsedBody}.${2:pathToTheProperty} ${3|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}"
    ]
  },
  "JS response body assetion": {
    "scope": "http,rest",
    "prefix": ["??","assert"],
    "description": "Validate a complex property of the HTTP response against a simple or complex condition using JavaScript.",
    "body": [
      "?? js ${1:responseBodyVariableName.propertyName} ${2|exists,isTrue,isFalse,isBoolean,isString,isNumber,sArray,matches ^regex$,== value,!= value,> value,>= value,< value,<= value,startsWith value,endWith value,includes value,contains value|}"
    ]
  },
  "Post-request test function asserion": {
    "scope": "http,rest",
    "prefix": ["test","assert"],
    "description": "Validate response using the 'test' function in a post-request script.",
    "body": [
      "{{",
      "  test('${1:testAssertionMessage}', () => {",
      "    response.statusCode == 200;",
      "    response.${2:additionalAssertion};",
      "  });",
      "\\}\\}"
    ]
  },
  "OAuth variables (hard-coded)": {
    "scope": "http,rest",
    "prefix": ["@","variables","oauth","openid","authorization"],
    "description": "Define common variables for the OAuth 2.0 (or OpenID) authorization using hard coded values.",
    "body": [
      "@${1:prefix}_clientId=${2:clientId}",
      "@$1_clientSecret=${3:clientSecret}",
      "${4:@$1_scope=${5:scope}}",
      "${6:@$1_audience=${7:audience}}",
      "@$1_tokenEndpoint=https://${8:tokenUrl}",
      "${9:@$1_authorizationEndpoint=https://${10:authorizationUrl}}",
      "${11:@$1_useAuthorizationHeader=${13|true,false|}}"
    ]
  },
  "OAuth variables (environment)": {
    "scope": "http,rest",
    "prefix": ["@","variables","oauth","openid","authorization"],
    "description": "Define common variables for the OAuth 2.0 (or OpenID) authorization using environment settings.",
    "body": [
      "@${1:prefix}_clientId={{${2:clientId}}}",
      "@$1_clientSecret={{${3:clientSecret}}}",
      "${4:@$1_scope={{${5:scope}\\}\\}}",
      "${6:@$1_audience={{${7:audience}\\}\\}}",
      "@$1_tokenEndpoint={{${8:tokenUrl}}}",
      "${9:@$1_authorizationEndpoint={{${10:authorizationUrl}\\}\\}}",
      "${11:@$1_useAuthorizationHeader=${13|true,false|}}"
    ]
  },
  "Authorization header (oauth2/openid)": {
    "scope": "http,rest",
    "prefix": ["header","authorization","oauth","openid"],
    "description": "Add an OAuth 2.0/OpenID authorization header to the request.",
    "body": [
      "Authorization: ${1|oauth2,openid|} ${2|client_credentials,authorization_code,implicit,password,device_code|} ${3|variablePrefix,clientCreds,authCode|}",
    ]
  },
  "Authorization header (Bearer)": {
    "scope": "http,rest",
    "prefix": ["header","authorization","bearer","token"],
    "description": "Add the Bearer authorization header to the request.",
    "body": [
      "Authorization: Bearer {{${1:bearer_token_variable}\\}\\}",
    ]
  },
  "Authorization header (Basic)": {
    "scope": "http,rest",
    "prefix": ["header","authorization","basic","password"],
    "description": "Add the Basic authorization header to the request.",
    "body": [
      "Authorization: Basic {{${1:user_variable}\\}\\}:{{${2:password_variable}\\}\\}",
    ]
  },
  "Content type header": {
    "scope": "http,rest",
    "prefix": ["header","content-type"],
    "description": "Add content type header describing request input data.",
    "body": [
      "Content-Type: ${1|application/json,application/merge-patch+json,application/json-patch+json,application/x-www-form-urlencoded|}"
    ]
  },
  "Default headers sample": {
    "scope": "http,rest",
    "prefix": ["header","default"],
    "description": "Add default header section.",
    "body": [
      "// This section goes at the top of the file:",
      "{{+",
      "  const token = \"encryptedtokenvalue\";",
      "  const correlationId = \"correlationidvalue\";",
      "",
      "  exports.defaultHeaders = {",
      "    'X-Correlation-Id': `${correlationId\\}`,",
      "    'Authorization': `Bearer ${token\\}`",
      "  };",
      "\\}\\}",
      "",
      "// Reference default headers after requests, e.g.:",
      "GET https://httpbin.org/anything?a=b",
      "...defaultHeaders",
      "",
      "POST https://httpbin.org/anything",
      "{",
      "  \"a\": \"b\"",
      "\\}",
      "...defaultHeaders",
    ]
  },









  "Cancel request": {
    "scope": "http,rest",
    "prefix": ["$cancel","disable"],
    "description": "Set the '$cancel' variable to cancel the request if the specified condition is met.",
    "body": [
      "exports.\\$cancel = ${1:condition};"
    ]
  },
  "Disable request": {
    "scope": "http,rest",
    "prefix": ["# @","disable","cancel"],
    "description": "Disable the request.",
    "body": [
      "# @disabled"
    ]
  }
}
